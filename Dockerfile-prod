#==================================================
# Package install Layer
FROM node:16.14-slim as node_modules

WORKDIR /app

# prismaの実行に必要
RUN apt-get -qy update && apt-get -qy install openssl --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY package.json yarn.lock ./
RUN yarn install --non-interactive --frozen-lockfile --production

COPY ./prisma ./prisma
RUN yarn generate

#==================================================
# Build Layer
FROM node:16.14-slim as build

WORKDIR /app

COPY package.json yarn.lock ./

RUN yarn install --non-interactive --frozen-lockfile

COPY . .

RUN yarn build

#==================================================
# Run Layer
# distrolessは軽量だがopensslのインストールができず、入れる労力に見合わないためdocker公式推奨のslimを使う
# 参考 https://hub.docker.com/_/node https://zenn.dev/unasuke/articles/5ee6e2067ab1ba
# FROM gcr.io/distroless/nodejs:16
FROM node:16.14-slim 

WORKDIR /app

# パフォーマンスやセキュリティ関連の最適化を有効にするため
ENV NODE_ENV=production

# prismaの実行に必要
RUN apt-get -qy update && apt-get -qy install openssl --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

# 非root権限ユーザーの追加
RUN useradd -m myuser && chown -R myuser /app

COPY --from=build --chown=myuser:myuser /app/dist /app/dist
COPY --from=node_modules /app/node_modules /app/node_modules

USER myuser
